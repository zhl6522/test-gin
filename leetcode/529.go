package main

/*
扫雷游戏

给定一个代表游戏板的二维字符矩阵。 'M' 代表一个未挖出的地雷，'E' 代表一个未挖出的空方块，'B' 代表没有相邻（上，下，左，右，和所有4个对角线）地雷的已挖出的空白方块，数字（'1' 到 '8'）表示有多少地雷与这块已挖出的方块相邻，'X' 则表示一个已挖出的地雷。
现在给出在所有未挖出的方块中（'M'或者'E'）的下一个点击位置（行和列索引），根据以下规则，返回相应位置被点击后对应的面板：
1、如果一个地雷（'M'）被挖出，游戏就结束了- 把它改为 'X'。
2、如果一个没有相邻地雷的空方块（'E'）被挖出，修改它为（'B'），并且所有和其相邻的未挖出方块都应该被递归地揭露。
3、如果一个至少与一个地雷相邻的空方块（'E'）被挖出，修改它为数字（'1'到'8'），表示相邻地雷的数量。
4、如果在此次点击中，若无更多方块可被揭露，则返回面板。
注意：
1、输入矩阵的宽和高的范围为 [1,50]。
2、点击的位置只能是未被挖出的方块 ('M' 或者 'E')，这也意味着面板至少包含一个可点击的方块。
3、输入面板不会是游戏结束的状态（即有地雷已被挖出）。
4、简单起见，未提及的规则在这个问题中可被忽略。例如，当游戏结束时你不需要挖出所有地雷，考虑所有你可能赢得游戏或标记方块的情况。
*/
var d = [8][2]int{{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}}

func updateBoard(board [][]byte, click []int) [][]byte {
	a, b := click[0], click[1]
	if board[a][b] == 'M' {
		board[a][b] = 'X'
	} else if board[a][b] == 'E' {
		m, n := len(board), len(board[0]) // m:宽 n:长
		var f func(int, int)
		f = func(i, j int) {
			c := byte('0')
			for _, di := range d {
				x, y := i+di[0], j+di[1]
				if 0 <= x && x < m && 0 <= y && y < n && board[x][y] == 'M' { // 四面八方8个位置是否有雷
					c++ // 周围地雷数目
				}
			}
			if c > '0' {
				board[i][j] = c // 这个位置周围地雷的数量
			} else {
				board[i][j] = 'B'
				for _, di := range d {
					x, y := i+di[0], j+di[1]
					if 0 <= x && x < m && 0 <= y && y < n && board[x][y] == 'E' { // 附近没有雷 默认就是E
						f(x, y)
					}
				}
			}
		}
		f(a, b)
	}
	return board
}
